diff -aur ncbi-cxx-toolkit-public-release-29.6.0/include/util/bitset/bmutil.h rpmbuild/BUILD/ncbi-cxx-toolkit-public-release-29.6.0/include/util/bitset/bmutil.h
--- ncbi-cxx-toolkit-public-release-29.6.0/include/util/bitset/bmutil.h	2025-09-30 06:46:23.000000000 +0000
+++ rpmbuild/BUILD/ncbi-cxx-toolkit-public-release-29.6.0/include/util/bitset/bmutil.h	2025-10-23 21:50:33.120000000 +0000
@@ -31,7 +31,7 @@
 #else
     #if defined(_M_AMD64) || defined(_M_X64)
     #include <intrin.h>
-    #elif defined(__x86_64__)
+#elif defined(__x86_64__) || defined(__i386__)
     #include <x86intrin.h>
     #endif
 #endif
diff -aur ncbi-cxx-toolkit-public-release-29.6.0/src/corelib/ncbifile.cpp rpmbuild/BUILD/ncbi-cxx-toolkit-public-release-29.6.0/src/corelib/ncbifile.cpp
--- ncbi-cxx-toolkit-public-release-29.6.0/src/corelib/ncbifile.cpp	2025-09-30 06:46:23.000000000 +0000
+++ rpmbuild/BUILD/ncbi-cxx-toolkit-public-release-29.6.0/src/corelib/ncbifile.cpp	2025-10-23 21:38:44.424000000 +0000
@@ -5160,7 +5160,7 @@
         }
         info->block_size = dwBytesPerSect * dwSectPerClust;
     }
-
+o
 #else // defined(NCBI_OS_MSWIN)
 
     bool need_name_max = true;
@@ -5177,70 +5177,70 @@
     GET_STATFS_INFO;
     if (flags & (fFSI_Type | fFSI_DiskSpace)) {
         switch (st.f_type) {
-            case 0xADF5:      info->fs_type = CFileUtil::eADFS;     break;
-            case 0xADFF:      info->fs_type = CFileUtil::eAFFS;     break;
-            case 0x5346414F:  info->fs_type = CFileUtil::eAFS;      break;
-            case 0x0187:      info->fs_type = CFileUtil::eAUTOFS;   break;
-            case 0x1BADFACE:  info->fs_type = CFileUtil::eBFS;      break;
-            case 0x4004:
-            case 0x4000:
-            case 0x9660:      info->fs_type = CFileUtil::eCDFS;     break;
-            case 0xF15F:      info->fs_type = CFileUtil::eCryptFS;  break;
-            case 0xFF534D42:  info->fs_type = CFileUtil::eCIFS;     break;
-            case 0x73757245:  info->fs_type = CFileUtil::eCODA;     break;
-            case 0x012FF7B7:  info->fs_type = CFileUtil::eCOH;      break;
-            case 0x28CD3D45:  info->fs_type = CFileUtil::eCRAMFS;   break;
-            case 0x1373:      info->fs_type = CFileUtil::eDEVFS;    break;
-            case 0x414A53:    info->fs_type = CFileUtil::eEFS;      break;
-            case 0x5DF5:      info->fs_type = CFileUtil::eEXOFS;    break;
-            case 0x137D:      info->fs_type = CFileUtil::eExt;      break;
-            case 0xEF51:
-            case 0xEF53:      info->fs_type = CFileUtil::eExt2;     break;
-            case 0x4d44:      info->fs_type = CFileUtil::eFAT;      break;
-            case 0x65735546:  info->fs_type = CFileUtil::eFUSE;     break;
-            case 0x65735543:  info->fs_type = CFileUtil::eFUSE_CTL; break;
-            case 0x01161970:  info->fs_type = CFileUtil::eGFS2;     break;
-            case 0x4244:      info->fs_type = CFileUtil::eHFS;      break;
-            case 0x482B:      info->fs_type = CFileUtil::eHFSPLUS;  break;
-            case 0xF995E849:  info->fs_type = CFileUtil::eHPFS;     break;
-            case 0x3153464A:  info->fs_type = CFileUtil::eJFS;      break;
-            case 0x07C0:      info->fs_type = CFileUtil::eJFFS;     break;
-            case 0x72B6:      info->fs_type = CFileUtil::eJFFS2;    break;
-            case 0x47504653:  info->fs_type = CFileUtil::eGPFS;     break;
-            case 0x137F:
-            case 0x138F:      info->fs_type = CFileUtil::eMinix;    break;
-            case 0x2468:
-            case 0x2478:      info->fs_type = CFileUtil::eMinix2;   break;
-            case 0x4D5A:      info->fs_type = CFileUtil::eMinix3;   break;
-            case 0x564C:      info->fs_type = CFileUtil::eNCPFS;    break;
-            case 0x6969:      info->fs_type = CFileUtil::eNFS;      break;
-            case 0x5346544E:  info->fs_type = CFileUtil::eNTFS;     break;
-            case 0x7461636F:  info->fs_type = CFileUtil::eOCFS2;    break;
-            case 0x9fA1:      info->fs_type = CFileUtil::eOPENPROM; break;
-            case 0xAAD7AAEA:  info->fs_type = CFileUtil::ePANFS;    break;
-            case 0x9fA0:      info->fs_type = CFileUtil::ePROC;     break;
-            case 0x20030528:  info->fs_type = CFileUtil::ePVFS2;    break;
-            case 0x002F:      info->fs_type = CFileUtil::eQNX4;     break;
-            case 0x52654973:  info->fs_type = CFileUtil::eReiserFS; break;
-            case 0x7275:      info->fs_type = CFileUtil::eROMFS;    break;
-            case 0xF97CFF8C:  info->fs_type = CFileUtil::eSELINUX;  break;
-            case 0x517B:      info->fs_type = CFileUtil::eSMBFS;    break;
-            case 0x73717368:  info->fs_type = CFileUtil::eSquashFS; break;
-            case 0x62656572:  info->fs_type = CFileUtil::eSYSFS;    break;
-            case 0x012FF7B6:  info->fs_type = CFileUtil::eSYSV2;    break;
-            case 0x012FF7B5:  info->fs_type = CFileUtil::eSYSV4;    break;
-            case 0x01021994:  info->fs_type = CFileUtil::eTMPFS;    break;
-            case 0x24051905:  info->fs_type = CFileUtil::eUBIFS;    break;
-            case 0x15013346:  info->fs_type = CFileUtil::eUDF;      break;
-            case 0x00011954:  info->fs_type = CFileUtil::eUFS;      break;
-            case 0x19540119:  info->fs_type = CFileUtil::eUFS2;     break;
-            case 0x9fA2:      info->fs_type = CFileUtil::eUSBDEVICE;break;
-            case 0x012FF7B8:  info->fs_type = CFileUtil::eV7;       break;
-            case 0xa501FCF5:  info->fs_type = CFileUtil::eVxFS;     break;
-            case 0x565a4653:  info->fs_type = CFileUtil::eVZFS;     break;
-            case 0x012FF7B4:  info->fs_type = CFileUtil::eXENIX;    break;
-            case 0x58465342:  info->fs_type = CFileUtil::eXFS;      break;
-            case 0x012FD16D:  info->fs_type = CFileUtil::eXIAFS;    break;
+            case static_cast<typeof(st.f_type)>(0xADF5):      info->fs_type = CFileUtil::eADFS;     break;
+            case static_cast<typeof(st.f_type)>(0xADFF):      info->fs_type = CFileUtil::eAFFS;     break;
+            case static_cast<typeof(st.f_type)>(0x5346414F):  info->fs_type = CFileUtil::eAFS;      break;
+            case static_cast<typeof(st.f_type)>(0x0187):      info->fs_type = CFileUtil::eAUTOFS;   break;
+            case static_cast<typeof(st.f_type)>(0x1BADFACE):  info->fs_type = CFileUtil::eBFS;      break;
+            case static_cast<typeof(st.f_type)>(0x4004):
+            case static_cast<typeof(st.f_type)>(0x4000):
+            case static_cast<typeof(st.f_type)>(0x9660):      info->fs_type = CFileUtil::eCDFS;     break;
+            case static_cast<typeof(st.f_type)>(0xF15F):      info->fs_type = CFileUtil::eCryptFS;  break;
+            case static_cast<typeof(st.f_type)>(0xFF534D42):  info->fs_type = CFileUtil::eCIFS;     break;
+            case static_cast<typeof(st.f_type)>(0x73757245):  info->fs_type = CFileUtil::eCODA;     break;
+            case static_cast<typeof(st.f_type)>(0x012FF7B7):  info->fs_type = CFileUtil::eCOH;      break;
+            case static_cast<typeof(st.f_type)>(0x28CD3D45):  info->fs_type = CFileUtil::eCRAMFS;   break;
+            case static_cast<typeof(st.f_type)>(0x1373):      info->fs_type = CFileUtil::eDEVFS;    break;
+            case static_cast<typeof(st.f_type)>(0x414A53):    info->fs_type = CFileUtil::eEFS;      break;
+            case static_cast<typeof(st.f_type)>(0x5DF5):      info->fs_type = CFileUtil::eEXOFS;    break;
+            case static_cast<typeof(st.f_type)>(0x137D):      info->fs_type = CFileUtil::eExt;      break;
+            case static_cast<typeof(st.f_type)>(0xEF51):
+            case static_cast<typeof(st.f_type)>(0xEF53):      info->fs_type = CFileUtil::eExt2;     break;
+            case static_cast<typeof(st.f_type)>(0x4d44):      info->fs_type = CFileUtil::eFAT;      break;
+            case static_cast<typeof(st.f_type)>(0x65735546):  info->fs_type = CFileUtil::eFUSE;     break;
+            case static_cast<typeof(st.f_type)>(0x65735543):  info->fs_type = CFileUtil::eFUSE_CTL; break;
+            case static_cast<typeof(st.f_type)>(0x01161970):  info->fs_type = CFileUtil::eGFS2;     break;
+            case static_cast<typeof(st.f_type)>(0x4244):      info->fs_type = CFileUtil::eHFS;      break;
+            case static_cast<typeof(st.f_type)>(0x482B):      info->fs_type = CFileUtil::eHFSPLUS;  break;
+            case static_cast<typeof(st.f_type)>(0xF995E849):  info->fs_type = CFileUtil::eHPFS;     break;
+            case static_cast<typeof(st.f_type)>(0x3153464A):  info->fs_type = CFileUtil::eJFS;      break;
+            case static_cast<typeof(st.f_type)>(0x07C0):      info->fs_type = CFileUtil::eJFFS;     break;
+            case static_cast<typeof(st.f_type)>(0x72B6):      info->fs_type = CFileUtil::eJFFS2;    break;
+            case static_cast<typeof(st.f_type)>(0x47504653):  info->fs_type = CFileUtil::eGPFS;     break;
+            case static_cast<typeof(st.f_type)>(0x137F):
+            case static_cast<typeof(st.f_type)>(0x138F):      info->fs_type = CFileUtil::eMinix;    break;
+            case static_cast<typeof(st.f_type)>(0x2468):
+            case static_cast<typeof(st.f_type)>(0x2478):      info->fs_type = CFileUtil::eMinix2;   break;
+            case static_cast<typeof(st.f_type)>(0x4D5A):      info->fs_type = CFileUtil::eMinix3;   break;
+            case static_cast<typeof(st.f_type)>(0x564C):      info->fs_type = CFileUtil::eNCPFS;    break;
+            case static_cast<typeof(st.f_type)>(0x6969):      info->fs_type = CFileUtil::eNFS;      break;
+            case static_cast<typeof(st.f_type)>(0x5346544E):  info->fs_type = CFileUtil::eNTFS;     break;
+            case static_cast<typeof(st.f_type)>(0x7461636F):  info->fs_type = CFileUtil::eOCFS2;    break;
+            case static_cast<typeof(st.f_type)>(0x9fA1):      info->fs_type = CFileUtil::eOPENPROM; break;
+            case static_cast<typeof(st.f_type)>(0xAAD7AAEA):  info->fs_type = CFileUtil::ePANFS;    break;
+            case static_cast<typeof(st.f_type)>(0x9fA0):      info->fs_type = CFileUtil::ePROC;     break;
+            case static_cast<typeof(st.f_type)>(0x20030528):  info->fs_type = CFileUtil::ePVFS2;    break;
+            case static_cast<typeof(st.f_type)>(0x002F):      info->fs_type = CFileUtil::eQNX4;     break;
+            case static_cast<typeof(st.f_type)>(0x52654973):  info->fs_type = CFileUtil::eReiserFS; break;
+            case static_cast<typeof(st.f_type)>(0x7275):      info->fs_type = CFileUtil::eROMFS;    break;
+            case static_cast<typeof(st.f_type)>(0xF97CFF8C):  info->fs_type = CFileUtil::eSELINUX;  break;
+            case static_cast<typeof(st.f_type)>(0x517B):      info->fs_type = CFileUtil::eSMBFS;    break;
+            case static_cast<typeof(st.f_type)>(0x73717368):  info->fs_type = CFileUtil::eSquashFS; break;
+            case static_cast<typeof(st.f_type)>(0x62656572):  info->fs_type = CFileUtil::eSYSFS;    break;
+            case static_cast<typeof(st.f_type)>(0x012FF7B6):  info->fs_type = CFileUtil::eSYSV2;    break;
+            case static_cast<typeof(st.f_type)>(0x012FF7B5):  info->fs_type = CFileUtil::eSYSV4;    break;
+            case static_cast<typeof(st.f_type)>(0x01021994):  info->fs_type = CFileUtil::eTMPFS;    break;
+            case static_cast<typeof(st.f_type)>(0x24051905):  info->fs_type = CFileUtil::eUBIFS;    break;
+            case static_cast<typeof(st.f_type)>(0x15013346):  info->fs_type = CFileUtil::eUDF;      break;
+            case static_cast<typeof(st.f_type)>(0x00011954):  info->fs_type = CFileUtil::eUFS;      break;
+            case static_cast<typeof(st.f_type)>(0x19540119):  info->fs_type = CFileUtil::eUFS2;     break;
+            case static_cast<typeof(st.f_type)>(0x9fA2):      info->fs_type = CFileUtil::eUSBDEVICE;break;
+            case static_cast<typeof(st.f_type)>(0x012FF7B8):  info->fs_type = CFileUtil::eV7;       break;
+            case static_cast<typeof(st.f_type)>(0xa501FCF5):  info->fs_type = CFileUtil::eVxFS;     break;
+            case static_cast<typeof(st.f_type)>(0x565a4653):  info->fs_type = CFileUtil::eVZFS;     break;
+            case static_cast<typeof(st.f_type)>(0x012FF7B4):  info->fs_type = CFileUtil::eXENIX;    break;
+            case static_cast<typeof(st.f_type)>(0x58465342):  info->fs_type = CFileUtil::eXFS;      break;
+            case static_cast<typeof(st.f_type)>(0x012FD16D):  info->fs_type = CFileUtil::eXIAFS;    break;
             default:          info->fs_type = CFileUtil::eUnknown;  break;
         }
     }
